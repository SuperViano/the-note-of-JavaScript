<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>基本和引用数据类型</title>
    <script>
        /*
        基本数据类型
        String Number Boolean Null Undefined

        引用数据类型
        Object
         */
        var a = 123;
        var b = a;
        a++;
        console.log("a=" + a);
        console.log("b=" + b);
        /*
        a跟b是两个独立的变量

         */
        var obj = new Object();
        obj.name = "sun";
        var obj2 = obj;
        obj.name = "zhu";
        console.log(obj.name);
        console.log(obj2.name);
        /*
        修改一个变量影响到另一个变量
        这是因为：内存分为：栈内存和堆内存

        引用数据类型属于堆内存
        js中的变量都是保存到栈内存的。
        基本数据类型的值直接在栈内存中保存
        var a = 123;
        var b = a;
        a++
        变量      值
        b        123(直接复制之前的a的值)
        a        124

        值与值之间是独立存在，修改一个变量不会影响到其他的变量


        var obj = new Object()
        obj.name = "wun"
        var obj2 = obj;
        obj.name = "zhu"
        obj2 = null
        变量     值               堆内存
        obj2    0x123-->null      (指向同一个内存）
        obj     0x123             在里面开辟一个新的内存空间，
                                  有内存空间的地址0x123，这段空间专门来保存obj的内容
                                  name = "wun"
                                 修改为：name = "zhu"

         对象是保存到堆内存中的，每创建一个新的对象，就会在堆内存中开辟一段新的空间
         而变量保存的是对象的内存地址（对象的引用），如果两个变量保存的是同一个对象引用
         当一个通过一个变量修改属性时，另一个也会受到影响


         */
        //设置obj2为null
        obj2 = null;
        console.log(obj);
        console.log(obj2);
        var c = 10;
        var d = 10;
        //c == d>>true

        var obj3 = new Object();
        var obj4 = new Object();
        //obj3 != obj4
        /*
        当比较两个基本数据类型的值是，就是比较值
        当比较两个引用数据类型时，他比较的时对象的内存地址
        如果两个对象是一摸一样，但是内存地址不同，所以还是不相等的
         */
    </script>
</head>
<body>

</body>
</html>
